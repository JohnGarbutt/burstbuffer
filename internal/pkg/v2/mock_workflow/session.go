// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/v2/workflow/session.go

// Package mock_workflow is a generated GoMock package.
package mock_workflow

import (
	datamodel "github.com/RSE-Cambridge/data-acc/internal/pkg/v2/datamodel"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSession is a mock of Session interface
type MockSession struct {
	ctrl     *gomock.Controller
	recorder *MockSessionMockRecorder
}

// MockSessionMockRecorder is the mock recorder for MockSession
type MockSessionMockRecorder struct {
	mock *MockSession
}

// NewMockSession creates a new mock instance
func NewMockSession(ctrl *gomock.Controller) *MockSession {
	mock := &MockSession{ctrl: ctrl}
	mock.recorder = &MockSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSession) EXPECT() *MockSessionMockRecorder {
	return m.recorder
}

// CreateSessionVolume mocks base method
func (m *MockSession) CreateSessionVolume(session datamodel.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSessionVolume", session)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSessionVolume indicates an expected call of CreateSessionVolume
func (mr *MockSessionMockRecorder) CreateSessionVolume(session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSessionVolume", reflect.TypeOf((*MockSession)(nil).CreateSessionVolume), session)
}

// DeleteSession mocks base method
func (m *MockSession) DeleteSession(sessionName datamodel.SessionName, hurry bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", sessionName, hurry)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSession indicates an expected call of DeleteSession
func (mr *MockSessionMockRecorder) DeleteSession(sessionName, hurry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockSession)(nil).DeleteSession), sessionName, hurry)
}

// DataIn mocks base method
func (m *MockSession) DataIn(sessionName datamodel.SessionName) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DataIn", sessionName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DataIn indicates an expected call of DataIn
func (mr *MockSessionMockRecorder) DataIn(sessionName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DataIn", reflect.TypeOf((*MockSession)(nil).DataIn), sessionName)
}

// AttachVolumes mocks base method
func (m *MockSession) AttachVolumes(sessionName datamodel.SessionName, computeNodes, loginNodes []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachVolumes", sessionName, computeNodes, loginNodes)
	ret0, _ := ret[0].(error)
	return ret0
}

// AttachVolumes indicates an expected call of AttachVolumes
func (mr *MockSessionMockRecorder) AttachVolumes(sessionName, computeNodes, loginNodes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachVolumes", reflect.TypeOf((*MockSession)(nil).AttachVolumes), sessionName, computeNodes, loginNodes)
}

// DetachVolumes mocks base method
func (m *MockSession) DetachVolumes(sessionName datamodel.SessionName) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachVolumes", sessionName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DetachVolumes indicates an expected call of DetachVolumes
func (mr *MockSessionMockRecorder) DetachVolumes(sessionName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachVolumes", reflect.TypeOf((*MockSession)(nil).DetachVolumes), sessionName)
}

// DataOut mocks base method
func (m *MockSession) DataOut(sessionName datamodel.SessionName) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DataOut", sessionName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DataOut indicates an expected call of DataOut
func (mr *MockSessionMockRecorder) DataOut(sessionName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DataOut", reflect.TypeOf((*MockSession)(nil).DataOut), sessionName)
}

// GetPools mocks base method
func (m *MockSession) GetPools() ([]datamodel.PoolInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPools")
	ret0, _ := ret[0].([]datamodel.PoolInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPools indicates an expected call of GetPools
func (mr *MockSessionMockRecorder) GetPools() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPools", reflect.TypeOf((*MockSession)(nil).GetPools))
}

// GetSession mocks base method
func (m *MockSession) GetSession(sessionName datamodel.SessionName) (datamodel.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", sessionName)
	ret0, _ := ret[0].(datamodel.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession
func (mr *MockSessionMockRecorder) GetSession(sessionName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockSession)(nil).GetSession), sessionName)
}

// GetAllSessions mocks base method
func (m *MockSession) GetAllSessions() ([]datamodel.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSessions")
	ret0, _ := ret[0].([]datamodel.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSessions indicates an expected call of GetAllSessions
func (mr *MockSessionMockRecorder) GetAllSessions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSessions", reflect.TypeOf((*MockSession)(nil).GetAllSessions))
}
