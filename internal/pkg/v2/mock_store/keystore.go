// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/v2/store/keystore.go

// Package mock_store is a generated GoMock package.
package mock_store

import (
	context "context"
	store "github.com/RSE-Cambridge/data-acc/internal/pkg/v2/store"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockKeystore is a mock of Keystore interface
type MockKeystore struct {
	ctrl     *gomock.Controller
	recorder *MockKeystoreMockRecorder
}

// MockKeystoreMockRecorder is the mock recorder for MockKeystore
type MockKeystoreMockRecorder struct {
	mock *MockKeystore
}

// NewMockKeystore creates a new mock instance
func NewMockKeystore(ctrl *gomock.Controller) *MockKeystore {
	mock := &MockKeystore{ctrl: ctrl}
	mock.recorder = &MockKeystoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKeystore) EXPECT() *MockKeystoreMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockKeystore) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockKeystoreMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockKeystore)(nil).Close))
}

// Create mocks base method
func (m *MockKeystore) Create(key string, value []byte) (store.KeyValueVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", key, value)
	ret0, _ := ret[0].(store.KeyValueVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockKeystoreMockRecorder) Create(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockKeystore)(nil).Create), key, value)
}

// Update mocks base method
func (m *MockKeystore) Update(key string, value []byte, modRevision int64) (store.KeyValueVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", key, value, modRevision)
	ret0, _ := ret[0].(store.KeyValueVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockKeystoreMockRecorder) Update(key, value, modRevision interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockKeystore)(nil).Update), key, value, modRevision)
}

// Delete mocks base method
func (m *MockKeystore) Delete(key string, modRevision int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", key, modRevision)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockKeystoreMockRecorder) Delete(key, modRevision interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockKeystore)(nil).Delete), key, modRevision)
}

// DeleteAllKeysWithPrefix mocks base method
func (m *MockKeystore) DeleteAllKeysWithPrefix(keyPrefix string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllKeysWithPrefix", keyPrefix)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllKeysWithPrefix indicates an expected call of DeleteAllKeysWithPrefix
func (mr *MockKeystoreMockRecorder) DeleteAllKeysWithPrefix(keyPrefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllKeysWithPrefix", reflect.TypeOf((*MockKeystore)(nil).DeleteAllKeysWithPrefix), keyPrefix)
}

// GetAll mocks base method
func (m *MockKeystore) GetAll(keyPrefix string) ([]store.KeyValueVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", keyPrefix)
	ret0, _ := ret[0].([]store.KeyValueVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockKeystoreMockRecorder) GetAll(keyPrefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockKeystore)(nil).GetAll), keyPrefix)
}

// Get mocks base method
func (m *MockKeystore) Get(key string) (store.KeyValueVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(store.KeyValueVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockKeystoreMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockKeystore)(nil).Get), key)
}

// IsExist mocks base method
func (m *MockKeystore) IsExist(key string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExist", key)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsExist indicates an expected call of IsExist
func (mr *MockKeystoreMockRecorder) IsExist(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExist", reflect.TypeOf((*MockKeystore)(nil).IsExist), key)
}

// Watch mocks base method
func (m *MockKeystore) Watch(ctxt context.Context, key string, withPrefix bool) store.KeyValueUpdateChan {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", ctxt, key, withPrefix)
	ret0, _ := ret[0].(store.KeyValueUpdateChan)
	return ret0
}

// Watch indicates an expected call of Watch
func (mr *MockKeystoreMockRecorder) Watch(ctxt, key, withPrefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockKeystore)(nil).Watch), ctxt, key, withPrefix)
}

// KeepAliveKey mocks base method
func (m *MockKeystore) KeepAliveKey(ctxt context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeepAliveKey", ctxt, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// KeepAliveKey indicates an expected call of KeepAliveKey
func (mr *MockKeystoreMockRecorder) KeepAliveKey(ctxt, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeepAliveKey", reflect.TypeOf((*MockKeystore)(nil).KeepAliveKey), ctxt, key)
}

// NewMutex mocks base method
func (m *MockKeystore) NewMutex(lockKey string) (store.Mutex, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewMutex", lockKey)
	ret0, _ := ret[0].(store.Mutex)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewMutex indicates an expected call of NewMutex
func (mr *MockKeystoreMockRecorder) NewMutex(lockKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewMutex", reflect.TypeOf((*MockKeystore)(nil).NewMutex), lockKey)
}

// MockMutex is a mock of Mutex interface
type MockMutex struct {
	ctrl     *gomock.Controller
	recorder *MockMutexMockRecorder
}

// MockMutexMockRecorder is the mock recorder for MockMutex
type MockMutexMockRecorder struct {
	mock *MockMutex
}

// NewMockMutex creates a new mock instance
func NewMockMutex(ctrl *gomock.Controller) *MockMutex {
	mock := &MockMutex{ctrl: ctrl}
	mock.recorder = &MockMutexMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMutex) EXPECT() *MockMutexMockRecorder {
	return m.recorder
}

// Lock mocks base method
func (m *MockMutex) Lock(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lock", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Lock indicates an expected call of Lock
func (mr *MockMutexMockRecorder) Lock(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockMutex)(nil).Lock), ctx)
}

// Unlock mocks base method
func (m *MockMutex) Unlock(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unlock", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unlock indicates an expected call of Unlock
func (mr *MockMutexMockRecorder) Unlock(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlock", reflect.TypeOf((*MockMutex)(nil).Unlock), ctx)
}
