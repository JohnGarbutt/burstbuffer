// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/data/session/session_registry.go

// Package mock_registry is a generated GoMock package.
package mock_registry

import (
	"github.com/RSE-Cambridge/data-acc/internal/pkg/v2/datamodel"
	"github.com/golang/mock/gomock"
	"reflect"
)

// MockActions is a mock of Actions interface
type MockActions struct {
	ctrl     *gomock.Controller
	recorder *MockActionsMockRecorder
}

// MockActionsMockRecorder is the mock recorder for MockActions
type MockActionsMockRecorder struct {
	mock *MockActions
}

// NewMockActions creates a new mock instance
func NewMockActions(ctrl *gomock.Controller) *MockActions {
	mock := &MockActions{ctrl: ctrl}
	mock.recorder = &MockActionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockActions) EXPECT() *MockActionsMockRecorder {
	return m.recorder
}

// CreateSession mocks base method
func (m *MockActions) CreateSessionVolume(session datamodel.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", session)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSession indicates an expected call of CreateSession
func (mr *MockActionsMockRecorder) CreateSessionVolume(session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockActions)(nil).CreateSessionVolume), session)
}

// DeleteSession mocks base method
func (m *MockActions) DeleteSession(session datamodel.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", session)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSession indicates an expected call of DeleteSession
func (mr *MockActionsMockRecorder) DeleteSession(session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockActions)(nil).DeleteSession), session)
}

// CopyDataIn mocks base method
func (m *MockActions) DataIn(session datamodel.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyDataIn", session)
	ret0, _ := ret[0].(error)
	return ret0
}

// CopyDataIn indicates an expected call of CopyDataIn
func (mr *MockActionsMockRecorder) DataIn(session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyDataIn", reflect.TypeOf((*MockActions)(nil).DataIn), session)
}

// Mount mocks base method
func (m *MockActions) AttachVolumes(session datamodel.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mount", session)
	ret0, _ := ret[0].(error)
	return ret0
}

// Mount indicates an expected call of Mount
func (mr *MockActionsMockRecorder) AttachVolumes(session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mount", reflect.TypeOf((*MockActions)(nil).AttachVolumes), session)
}

// Unmount mocks base method
func (m *MockActions) DetachVolumes(session datamodel.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unmount", session)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unmount indicates an expected call of Unmount
func (mr *MockActionsMockRecorder) DetachVolumes(session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unmount", reflect.TypeOf((*MockActions)(nil).DetachVolumes), session)
}

// CopyDataOut mocks base method
func (m *MockActions) DataOut(session datamodel.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyDataOut", session)
	ret0, _ := ret[0].(error)
	return ret0
}

// CopyDataOut indicates an expected call of CopyDataOut
func (mr *MockActionsMockRecorder) DataOut(session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyDataOut", reflect.TypeOf((*MockActions)(nil).DataOut), session)
}
