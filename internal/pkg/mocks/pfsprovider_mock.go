// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/pfsprovider/interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	pfsprovider "github.com/RSE-Cambridge/data-acc/internal/pkg/pfsprovider"
	registry "github.com/RSE-Cambridge/data-acc/internal/pkg/registry"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPlugin is a mock of Plugin interface
type MockPlugin struct {
	ctrl     *gomock.Controller
	recorder *MockPluginMockRecorder
}

// MockPluginMockRecorder is the mock recorder for MockPlugin
type MockPluginMockRecorder struct {
	mock *MockPlugin
}

// NewMockPlugin creates a new mock instance
func NewMockPlugin(ctrl *gomock.Controller) *MockPlugin {
	mock := &MockPlugin{ctrl: ctrl}
	mock.recorder = &MockPluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPlugin) EXPECT() *MockPluginMockRecorder {
	return m.recorder
}

// Mounter mocks base method
func (m *MockPlugin) Mounter() pfsprovider.Mounter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mounter")
	ret0, _ := ret[0].(pfsprovider.Mounter)
	return ret0
}

// Mounter indicates an expected call of Mounter
func (mr *MockPluginMockRecorder) Mounter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mounter", reflect.TypeOf((*MockPlugin)(nil).Mounter))
}

// VolumeProvider mocks base method
func (m *MockPlugin) VolumeProvider() pfsprovider.VolumeProvider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeProvider")
	ret0, _ := ret[0].(pfsprovider.VolumeProvider)
	return ret0
}

// VolumeProvider indicates an expected call of VolumeProvider
func (mr *MockPluginMockRecorder) VolumeProvider() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeProvider", reflect.TypeOf((*MockPlugin)(nil).VolumeProvider))
}

// MockVolumeProvider is a mock of VolumeProvider interface
type MockVolumeProvider struct {
	ctrl     *gomock.Controller
	recorder *MockVolumeProviderMockRecorder
}

// MockVolumeProviderMockRecorder is the mock recorder for MockVolumeProvider
type MockVolumeProviderMockRecorder struct {
	mock *MockVolumeProvider
}

// NewMockVolumeProvider creates a new mock instance
func NewMockVolumeProvider(ctrl *gomock.Controller) *MockVolumeProvider {
	mock := &MockVolumeProvider{ctrl: ctrl}
	mock.recorder = &MockVolumeProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVolumeProvider) EXPECT() *MockVolumeProviderMockRecorder {
	return m.recorder
}

// SetupVolume mocks base method
func (m *MockVolumeProvider) SetupVolume(volume registry.Volume, brickAllocations []registry.BrickAllocation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetupVolume", volume, brickAllocations)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetupVolume indicates an expected call of SetupVolume
func (mr *MockVolumeProviderMockRecorder) SetupVolume(volume, brickAllocations interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupVolume", reflect.TypeOf((*MockVolumeProvider)(nil).SetupVolume), volume, brickAllocations)
}

// TeardownVolume mocks base method
func (m *MockVolumeProvider) TeardownVolume(volume registry.Volume, brickAllocations []registry.BrickAllocation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TeardownVolume", volume, brickAllocations)
	ret0, _ := ret[0].(error)
	return ret0
}

// TeardownVolume indicates an expected call of TeardownVolume
func (mr *MockVolumeProviderMockRecorder) TeardownVolume(volume, brickAllocations interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TeardownVolume", reflect.TypeOf((*MockVolumeProvider)(nil).TeardownVolume), volume, brickAllocations)
}

// CopyDataIn mocks base method
func (m *MockVolumeProvider) CopyDataIn(volume registry.Volume) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyDataIn", volume)
	ret0, _ := ret[0].(error)
	return ret0
}

// CopyDataIn indicates an expected call of CopyDataIn
func (mr *MockVolumeProviderMockRecorder) CopyDataIn(volume interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyDataIn", reflect.TypeOf((*MockVolumeProvider)(nil).CopyDataIn), volume)
}

// CopyDataOut mocks base method
func (m *MockVolumeProvider) CopyDataOut(volume registry.Volume) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyDataOut", volume)
	ret0, _ := ret[0].(error)
	return ret0
}

// CopyDataOut indicates an expected call of CopyDataOut
func (mr *MockVolumeProviderMockRecorder) CopyDataOut(volume interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyDataOut", reflect.TypeOf((*MockVolumeProvider)(nil).CopyDataOut), volume)
}

// MockMounter is a mock of Mounter interface
type MockMounter struct {
	ctrl     *gomock.Controller
	recorder *MockMounterMockRecorder
}

// MockMounterMockRecorder is the mock recorder for MockMounter
type MockMounterMockRecorder struct {
	mock *MockMounter
}

// NewMockMounter creates a new mock instance
func NewMockMounter(ctrl *gomock.Controller) *MockMounter {
	mock := &MockMounter{ctrl: ctrl}
	mock.recorder = &MockMounterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMounter) EXPECT() *MockMounterMockRecorder {
	return m.recorder
}

// Mount mocks base method
func (m *MockMounter) Mount(volume registry.Volume, brickAllocations []registry.BrickAllocation, attachments []registry.Attachment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mount", volume, brickAllocations, attachments)
	ret0, _ := ret[0].(error)
	return ret0
}

// Mount indicates an expected call of Mount
func (mr *MockMounterMockRecorder) Mount(volume, brickAllocations, attachments interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mount", reflect.TypeOf((*MockMounter)(nil).Mount), volume, brickAllocations, attachments)
}

// Unmount mocks base method
func (m *MockMounter) Unmount(volume registry.Volume, brickAllocations []registry.BrickAllocation, attachments []registry.Attachment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unmount", volume, brickAllocations, attachments)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unmount indicates an expected call of Unmount
func (mr *MockMounterMockRecorder) Unmount(volume, brickAllocations, attachments interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unmount", reflect.TypeOf((*MockMounter)(nil).Unmount), volume, brickAllocations, attachments)
}
