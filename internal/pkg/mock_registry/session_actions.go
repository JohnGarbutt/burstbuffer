// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/registry/session_actions.go

// Package mock_registry is a generated GoMock package.
package mock_registry

import (
	context "context"
	datamodel "github.com/RSE-Cambridge/data-acc/internal/pkg/datamodel"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSessionActions is a mock of SessionActions interface
type MockSessionActions struct {
	ctrl     *gomock.Controller
	recorder *MockSessionActionsMockRecorder
}

// MockSessionActionsMockRecorder is the mock recorder for MockSessionActions
type MockSessionActionsMockRecorder struct {
	mock *MockSessionActions
}

// NewMockSessionActions creates a new mock instance
func NewMockSessionActions(ctrl *gomock.Controller) *MockSessionActions {
	mock := &MockSessionActions{ctrl: ctrl}
	mock.recorder = &MockSessionActionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSessionActions) EXPECT() *MockSessionActionsMockRecorder {
	return m.recorder
}

// SendSessionAction mocks base method
func (m *MockSessionActions) SendSessionAction(ctxt context.Context, actionType datamodel.SessionActionType, session datamodel.Session) (<-chan datamodel.SessionAction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendSessionAction", ctxt, actionType, session)
	ret0, _ := ret[0].(<-chan datamodel.SessionAction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendSessionAction indicates an expected call of SendSessionAction
func (mr *MockSessionActionsMockRecorder) SendSessionAction(ctxt, actionType, session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSessionAction", reflect.TypeOf((*MockSessionActions)(nil).SendSessionAction), ctxt, actionType, session)
}

// GetSessionActionRequests mocks base method
func (m *MockSessionActions) GetSessionActionRequests(ctxt context.Context, brickHostName datamodel.BrickHostName) (<-chan datamodel.SessionAction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionActionRequests", ctxt, brickHostName)
	ret0, _ := ret[0].(<-chan datamodel.SessionAction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionActionRequests indicates an expected call of GetSessionActionRequests
func (mr *MockSessionActionsMockRecorder) GetSessionActionRequests(ctxt, brickHostName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionActionRequests", reflect.TypeOf((*MockSessionActions)(nil).GetSessionActionRequests), ctxt, brickHostName)
}

// CompleteSessionAction mocks base method
func (m *MockSessionActions) CompleteSessionAction(action datamodel.SessionAction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteSessionAction", action)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompleteSessionAction indicates an expected call of CompleteSessionAction
func (mr *MockSessionActionsMockRecorder) CompleteSessionAction(action interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteSessionAction", reflect.TypeOf((*MockSessionActions)(nil).CompleteSessionAction), action)
}
