// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/registry/brick_host.go

// Package mock_registry is a generated GoMock package.
package mock_registry

import (
	context "context"
	datamodel "github.com/RSE-Cambridge/data-acc/internal/pkg/datamodel"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBrickHostRegistry is a mock of BrickHostRegistry interface
type MockBrickHostRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockBrickHostRegistryMockRecorder
}

// MockBrickHostRegistryMockRecorder is the mock recorder for MockBrickHostRegistry
type MockBrickHostRegistryMockRecorder struct {
	mock *MockBrickHostRegistry
}

// NewMockBrickHostRegistry creates a new mock instance
func NewMockBrickHostRegistry(ctrl *gomock.Controller) *MockBrickHostRegistry {
	mock := &MockBrickHostRegistry{ctrl: ctrl}
	mock.recorder = &MockBrickHostRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBrickHostRegistry) EXPECT() *MockBrickHostRegistryMockRecorder {
	return m.recorder
}

// UpdateBrickHost mocks base method
func (m *MockBrickHostRegistry) UpdateBrickHost(brickHostInfo datamodel.BrickHost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBrickHost", brickHostInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBrickHost indicates an expected call of UpdateBrickHost
func (mr *MockBrickHostRegistryMockRecorder) UpdateBrickHost(brickHostInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBrickHost", reflect.TypeOf((*MockBrickHostRegistry)(nil).UpdateBrickHost), brickHostInfo)
}

// GetAllBrickHosts mocks base method
func (m *MockBrickHostRegistry) GetAllBrickHosts() ([]datamodel.BrickHost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBrickHosts")
	ret0, _ := ret[0].([]datamodel.BrickHost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllBrickHosts indicates an expected call of GetAllBrickHosts
func (mr *MockBrickHostRegistryMockRecorder) GetAllBrickHosts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBrickHosts", reflect.TypeOf((*MockBrickHostRegistry)(nil).GetAllBrickHosts))
}

// KeepAliveHost mocks base method
func (m *MockBrickHostRegistry) KeepAliveHost(ctxt context.Context, brickHostName datamodel.BrickHostName) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeepAliveHost", ctxt, brickHostName)
	ret0, _ := ret[0].(error)
	return ret0
}

// KeepAliveHost indicates an expected call of KeepAliveHost
func (mr *MockBrickHostRegistryMockRecorder) KeepAliveHost(ctxt, brickHostName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeepAliveHost", reflect.TypeOf((*MockBrickHostRegistry)(nil).KeepAliveHost), ctxt, brickHostName)
}

// IsBrickHostAlive mocks base method
func (m *MockBrickHostRegistry) IsBrickHostAlive(brickHostName datamodel.BrickHostName) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsBrickHostAlive", brickHostName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsBrickHostAlive indicates an expected call of IsBrickHostAlive
func (mr *MockBrickHostRegistryMockRecorder) IsBrickHostAlive(brickHostName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBrickHostAlive", reflect.TypeOf((*MockBrickHostRegistry)(nil).IsBrickHostAlive), brickHostName)
}
