// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/facade/session.go

// Package mock_facade is a generated GoMock package.
package mock_facade

import (
	datamodel "github.com/RSE-Cambridge/data-acc/internal/pkg/datamodel"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSession is a mock of Session interface
type MockSession struct {
	ctrl     *gomock.Controller
	recorder *MockSessionMockRecorder
}

// MockSessionMockRecorder is the mock recorder for MockSession
type MockSessionMockRecorder struct {
	mock *MockSession
}

// NewMockSession creates a new mock instance
func NewMockSession(ctrl *gomock.Controller) *MockSession {
	mock := &MockSession{ctrl: ctrl}
	mock.recorder = &MockSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSession) EXPECT() *MockSessionMockRecorder {
	return m.recorder
}

// CreateSession mocks base method
func (m *MockSession) CreateSession(session datamodel.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", session)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSession indicates an expected call of CreateSession
func (mr *MockSessionMockRecorder) CreateSession(session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockSession)(nil).CreateSession), session)
}

// DeleteSession mocks base method
func (m *MockSession) DeleteSession(sessionName datamodel.SessionName, hurry bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", sessionName, hurry)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSession indicates an expected call of DeleteSession
func (mr *MockSessionMockRecorder) DeleteSession(sessionName, hurry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockSession)(nil).DeleteSession), sessionName, hurry)
}

// CopyDataIn mocks base method
func (m *MockSession) CopyDataIn(sessionName datamodel.SessionName) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyDataIn", sessionName)
	ret0, _ := ret[0].(error)
	return ret0
}

// CopyDataIn indicates an expected call of CopyDataIn
func (mr *MockSessionMockRecorder) CopyDataIn(sessionName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyDataIn", reflect.TypeOf((*MockSession)(nil).CopyDataIn), sessionName)
}

// Mount mocks base method
func (m *MockSession) Mount(sessionName datamodel.SessionName, computeNodes, loginNodes []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mount", sessionName, computeNodes, loginNodes)
	ret0, _ := ret[0].(error)
	return ret0
}

// Mount indicates an expected call of Mount
func (mr *MockSessionMockRecorder) Mount(sessionName, computeNodes, loginNodes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mount", reflect.TypeOf((*MockSession)(nil).Mount), sessionName, computeNodes, loginNodes)
}

// Unmount mocks base method
func (m *MockSession) Unmount(sessionName datamodel.SessionName) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unmount", sessionName)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unmount indicates an expected call of Unmount
func (mr *MockSessionMockRecorder) Unmount(sessionName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unmount", reflect.TypeOf((*MockSession)(nil).Unmount), sessionName)
}

// CopyDataOut mocks base method
func (m *MockSession) CopyDataOut(sessionName datamodel.SessionName) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyDataOut", sessionName)
	ret0, _ := ret[0].(error)
	return ret0
}

// CopyDataOut indicates an expected call of CopyDataOut
func (mr *MockSessionMockRecorder) CopyDataOut(sessionName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyDataOut", reflect.TypeOf((*MockSession)(nil).CopyDataOut), sessionName)
}

// GetPools mocks base method
func (m *MockSession) GetPools() ([]datamodel.PoolInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPools")
	ret0, _ := ret[0].([]datamodel.PoolInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPools indicates an expected call of GetPools
func (mr *MockSessionMockRecorder) GetPools() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPools", reflect.TypeOf((*MockSession)(nil).GetPools))
}

// GetSession mocks base method
func (m *MockSession) GetSession(sessionName datamodel.SessionName) (datamodel.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", sessionName)
	ret0, _ := ret[0].(datamodel.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession
func (mr *MockSessionMockRecorder) GetSession(sessionName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockSession)(nil).GetSession), sessionName)
}

// GetAllSessions mocks base method
func (m *MockSession) GetAllSessions() ([]datamodel.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSessions")
	ret0, _ := ret[0].([]datamodel.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSessions indicates an expected call of GetAllSessions
func (mr *MockSessionMockRecorder) GetAllSessions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSessions", reflect.TypeOf((*MockSession)(nil).GetAllSessions))
}
