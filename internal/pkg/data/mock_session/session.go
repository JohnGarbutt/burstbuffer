// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/data/session/session.go

// Package mock_session is a generated GoMock package.
package mock_session

import (
	model "github.com/RSE-Cambridge/data-acc/internal/pkg/data/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRegistry is a mock of Registry interface
type MockRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockRegistryMockRecorder
}

// MockRegistryMockRecorder is the mock recorder for MockRegistry
type MockRegistryMockRecorder struct {
	mock *MockRegistry
}

// NewMockRegistry creates a new mock instance
func NewMockRegistry(ctrl *gomock.Controller) *MockRegistry {
	mock := &MockRegistry{ctrl: ctrl}
	mock.recorder = &MockRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRegistry) EXPECT() *MockRegistryMockRecorder {
	return m.recorder
}

// GetSession mocks base method
func (m *MockRegistry) GetSession(token string) (model.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", token)
	ret0, _ := ret[0].(model.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession
func (mr *MockRegistryMockRecorder) GetSession(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockRegistry)(nil).GetSession), token)
}

// CreateSessionAllocations mocks base method
func (m *MockRegistry) CreateSessionAllocations(s model.Session) (model.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSessionAllocations", s)
	ret0, _ := ret[0].(model.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSessionAllocations indicates an expected call of CreateSessionAllocations
func (mr *MockRegistryMockRecorder) CreateSessionAllocations(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSessionAllocations", reflect.TypeOf((*MockRegistry)(nil).CreateSessionAllocations), s)
}

// ValidateSessionRequest mocks base method
func (m *MockRegistry) ValidateSessionRequest(token string) (model.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateSessionRequest", token)
	ret0, _ := ret[0].(model.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateSessionRequest indicates an expected call of ValidateSessionRequest
func (mr *MockRegistryMockRecorder) ValidateSessionRequest(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateSessionRequest", reflect.TypeOf((*MockRegistry)(nil).ValidateSessionRequest), token)
}

// GetAllSessions mocks base method
func (m *MockRegistry) GetAllSessions() ([]model.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSessions")
	ret0, _ := ret[0].([]model.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSessions indicates an expected call of GetAllSessions
func (mr *MockRegistryMockRecorder) GetAllSessions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSessions", reflect.TypeOf((*MockRegistry)(nil).GetAllSessions))
}

// GetAllPools mocks base method
func (m *MockRegistry) GetAllPools() ([]model.Pool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPools")
	ret0, _ := ret[0].([]model.Pool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPools indicates an expected call of GetAllPools
func (mr *MockRegistryMockRecorder) GetAllPools() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPools", reflect.TypeOf((*MockRegistry)(nil).GetAllPools))
}
