// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/data/session/actions.go

// Package mock_session is a generated GoMock package.
package mock_session

import (
	"github.com/RSE-Cambridge/data-acc/internal/pkg/data/model"
	"github.com/golang/mock/gomock"
	"reflect"
)

// MockActions is a mock of Actions interface
type MockActions struct {
	ctrl     *gomock.Controller
	recorder *MockActionsMockRecorder
}

// MockActionsMockRecorder is the mock recorder for MockActions
type MockActionsMockRecorder struct {
	mock *MockActions
}

// NewMockActions creates a new mock instance
func NewMockActions(ctrl *gomock.Controller) *MockActions {
	mock := &MockActions{ctrl: ctrl}
	mock.recorder = &MockActionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockActions) EXPECT() *MockActionsMockRecorder {
	return m.recorder
}

// CreateSessionVolume mocks base method
func (m *MockActions) CreateSessionVolume(session model.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSessionVolume", session)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSessionVolume indicates an expected call of CreateSessionVolume
func (mr *MockActionsMockRecorder) CreateSessionVolume(session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSessionVolume", reflect.TypeOf((*MockActions)(nil).CreateSessionVolume), session)
}

// DeleteSession mocks base method
func (m *MockActions) DeleteSession(session model.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", session)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSession indicates an expected call of DeleteSession
func (mr *MockActionsMockRecorder) DeleteSession(session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockActions)(nil).DeleteSession), session)
}

// DataIn mocks base method
func (m *MockActions) DataIn(session model.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DataIn", session)
	ret0, _ := ret[0].(error)
	return ret0
}

// DataIn indicates an expected call of DataIn
func (mr *MockActionsMockRecorder) DataIn(session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DataIn", reflect.TypeOf((*MockActions)(nil).DataIn), session)
}

// AttachVolumes mocks base method
func (m *MockActions) AttachVolumes(session model.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachVolumes", session)
	ret0, _ := ret[0].(error)
	return ret0
}

// AttachVolumes indicates an expected call of AttachVolumes
func (mr *MockActionsMockRecorder) AttachVolumes(session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachVolumes", reflect.TypeOf((*MockActions)(nil).AttachVolumes), session)
}

// DetachVolumes mocks base method
func (m *MockActions) DetachVolumes(session model.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachVolumes", session)
	ret0, _ := ret[0].(error)
	return ret0
}

// DetachVolumes indicates an expected call of DetachVolumes
func (mr *MockActionsMockRecorder) DetachVolumes(session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachVolumes", reflect.TypeOf((*MockActions)(nil).DetachVolumes), session)
}

// DataOut mocks base method
func (m *MockActions) DataOut(session model.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DataOut", session)
	ret0, _ := ret[0].(error)
	return ret0
}

// DataOut indicates an expected call of DataOut
func (mr *MockActionsMockRecorder) DataOut(session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DataOut", reflect.TypeOf((*MockActions)(nil).DataOut), session)
}
