// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/fileio/disk.go

// Package mock_fileio is a generated GoMock package.
package mock_fileio

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDisk is a mock of Disk interface
type MockDisk struct {
	ctrl     *gomock.Controller
	recorder *MockDiskMockRecorder
}

// MockDiskMockRecorder is the mock recorder for MockDisk
type MockDiskMockRecorder struct {
	mock *MockDisk
}

// NewMockDisk creates a new mock instance
func NewMockDisk(ctrl *gomock.Controller) *MockDisk {
	mock := &MockDisk{ctrl: ctrl}
	mock.recorder = &MockDiskMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDisk) EXPECT() *MockDiskMockRecorder {
	return m.recorder
}

// Lines mocks base method
func (m *MockDisk) Lines(filename string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lines", filename)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lines indicates an expected call of Lines
func (mr *MockDiskMockRecorder) Lines(filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lines", reflect.TypeOf((*MockDisk)(nil).Lines), filename)
}

// Write mocks base method
func (m *MockDisk) Write(filename string, lines []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", filename, lines)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write
func (mr *MockDiskMockRecorder) Write(filename, lines interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockDisk)(nil).Write), filename, lines)
}
