// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/registry/pool.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	registry "github.com/RSE-Cambridge/data-acc/internal/pkg/registry"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPoolRegistry is a mock of PoolRegistry interface
type MockPoolRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockPoolRegistryMockRecorder
}

// MockPoolRegistryMockRecorder is the mock recorder for MockPoolRegistry
type MockPoolRegistryMockRecorder struct {
	mock *MockPoolRegistry
}

// NewMockPoolRegistry creates a new mock instance
func NewMockPoolRegistry(ctrl *gomock.Controller) *MockPoolRegistry {
	mock := &MockPoolRegistry{ctrl: ctrl}
	mock.recorder = &MockPoolRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPoolRegistry) EXPECT() *MockPoolRegistryMockRecorder {
	return m.recorder
}

// Pools mocks base method
func (m *MockPoolRegistry) Pools() ([]registry.Pool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pools")
	ret0, _ := ret[0].([]registry.Pool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pools indicates an expected call of Pools
func (mr *MockPoolRegistryMockRecorder) Pools() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pools", reflect.TypeOf((*MockPoolRegistry)(nil).Pools))
}

// UpdateHost mocks base method
func (m *MockPoolRegistry) UpdateHost(bricks []registry.BrickInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHost", bricks)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateHost indicates an expected call of UpdateHost
func (mr *MockPoolRegistryMockRecorder) UpdateHost(bricks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHost", reflect.TypeOf((*MockPoolRegistry)(nil).UpdateHost), bricks)
}

// KeepAliveHost mocks base method
func (m *MockPoolRegistry) KeepAliveHost(hostname string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeepAliveHost", hostname)
	ret0, _ := ret[0].(error)
	return ret0
}

// KeepAliveHost indicates an expected call of KeepAliveHost
func (mr *MockPoolRegistryMockRecorder) KeepAliveHost(hostname interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeepAliveHost", reflect.TypeOf((*MockPoolRegistry)(nil).KeepAliveHost), hostname)
}

// AllocateBricksForVolume mocks base method
func (m *MockPoolRegistry) AllocateBricksForVolume(volume registry.Volume) ([]registry.BrickAllocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocateBricksForVolume", volume)
	ret0, _ := ret[0].([]registry.BrickAllocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocateBricksForVolume indicates an expected call of AllocateBricksForVolume
func (mr *MockPoolRegistryMockRecorder) AllocateBricksForVolume(volume interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateBricksForVolume", reflect.TypeOf((*MockPoolRegistry)(nil).AllocateBricksForVolume), volume)
}

// DeallocateBricks mocks base method
func (m *MockPoolRegistry) DeallocateBricks(volume registry.VolumeName) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeallocateBricks", volume)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeallocateBricks indicates an expected call of DeallocateBricks
func (mr *MockPoolRegistryMockRecorder) DeallocateBricks(volume interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeallocateBricks", reflect.TypeOf((*MockPoolRegistry)(nil).DeallocateBricks), volume)
}

// HardDeleteAllocations mocks base method
func (m *MockPoolRegistry) HardDeleteAllocations(allocations []registry.BrickAllocation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HardDeleteAllocations", allocations)
	ret0, _ := ret[0].(error)
	return ret0
}

// HardDeleteAllocations indicates an expected call of HardDeleteAllocations
func (mr *MockPoolRegistryMockRecorder) HardDeleteAllocations(allocations interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HardDeleteAllocations", reflect.TypeOf((*MockPoolRegistry)(nil).HardDeleteAllocations), allocations)
}

// GetAllocationsForHost mocks base method
func (m *MockPoolRegistry) GetAllocationsForHost(hostname string) ([]registry.BrickAllocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllocationsForHost", hostname)
	ret0, _ := ret[0].([]registry.BrickAllocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllocationsForHost indicates an expected call of GetAllocationsForHost
func (mr *MockPoolRegistryMockRecorder) GetAllocationsForHost(hostname interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllocationsForHost", reflect.TypeOf((*MockPoolRegistry)(nil).GetAllocationsForHost), hostname)
}

// GetAllocationsForVolume mocks base method
func (m *MockPoolRegistry) GetAllocationsForVolume(volume registry.VolumeName) ([]registry.BrickAllocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllocationsForVolume", volume)
	ret0, _ := ret[0].([]registry.BrickAllocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllocationsForVolume indicates an expected call of GetAllocationsForVolume
func (mr *MockPoolRegistryMockRecorder) GetAllocationsForVolume(volume interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllocationsForVolume", reflect.TypeOf((*MockPoolRegistry)(nil).GetAllocationsForVolume), volume)
}

// GetBrickInfo mocks base method
func (m *MockPoolRegistry) GetBrickInfo(hostname, device string) (registry.BrickInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBrickInfo", hostname, device)
	ret0, _ := ret[0].(registry.BrickInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBrickInfo indicates an expected call of GetBrickInfo
func (mr *MockPoolRegistryMockRecorder) GetBrickInfo(hostname, device interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBrickInfo", reflect.TypeOf((*MockPoolRegistry)(nil).GetBrickInfo), hostname, device)
}

// GetNewHostBrickAllocations mocks base method
func (m *MockPoolRegistry) GetNewHostBrickAllocations(ctxt context.Context, hostname string) <-chan registry.BrickAllocation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewHostBrickAllocations", ctxt, hostname)
	ret0, _ := ret[0].(<-chan registry.BrickAllocation)
	return ret0
}

// GetNewHostBrickAllocations indicates an expected call of GetNewHostBrickAllocations
func (mr *MockPoolRegistryMockRecorder) GetNewHostBrickAllocations(ctxt, hostname interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewHostBrickAllocations", reflect.TypeOf((*MockPoolRegistry)(nil).GetNewHostBrickAllocations), ctxt, hostname)
}
